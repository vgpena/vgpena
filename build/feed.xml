<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>hey it's violet</title>
  <subtitle>developer &amp; human in the PNW</subtitle>
  <id>https://vgpena.github.io/</id>
  <link href="https://vgpena.github.io"/>
  <link href="https://vgpena.github.io/feed.xml" rel="self"/>
  <updated>2020-02-29T20:37:00-08:00</updated>
  <author>
    <name>Violet Pe√±a</name>
  </author>
  <entry>
    <title>Do you want to build a slide deck?</title>
    <link rel="alternate" href="https://vgpena.github.io/do-you-want-to-build-a-slide-deck/"/>
    <id>https://vgpena.github.io/do-you-want-to-build-a-slide-deck/</id>
    <published>2020-02-29T20:37:00-08:00</published>
    <updated>2020-02-29T20:55:08-08:00</updated>
    <author>
      <name>Violet Pe√±a</name>
    </author>
    <summary type="html">Giving a presentation often means building a deck. Here's a comparison of my favorite  deck-building tools, including times to use or avoid each of them.</summary>
    <content type="html">&lt;p&gt;Over the past several years, I‚Äôve given a few conference talks and many less-formal workplace presentations. This means I‚Äôve spent a lot of time writing and editing slide decks. Along the way, I‚Äôve grown to love three deck-building tools: Dropbox Paper, Google Slides, and Keynote. They each have their own strengths and flourish in different settings.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a rundown of these presentation tools based on my preferences and experience.&lt;/p&gt;
&lt;h2 class='section-title' id=dropbox-paper&gt;&lt;a href='#dropbox-paper' class='section-inner'&gt;Dropbox Paper&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The simple one.&lt;/strong&gt; Technically, you don‚Äôt make decks in Paper, but it‚Äôs my go-to for for informal presentations.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class=" image-secondary"&gt;
    &lt;img src="/images/snowman.gif" alt="Ana from Disney's &amp;quot;Frozen&amp;quot; sings into a closed door. Subtitle reads: &amp;quot;Do you want to build a snowman?&amp;quot;" title="It doesn't have to be a snowman" width="281px" height="252px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;It doesn&amp;#39;t have to be a slide deck üéµ&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;If you hit the Present button on any Paper doc, you get a cleaned-up view of the doc with larger text, no toolbars, etc. The secret sauce here is that horizontal rules in the original doc create slide breaks in Presentation mode. This creates cleaner visuals and transforms a wall of text into something resembling a slide deck.&lt;/p&gt;

&lt;p&gt;Paper lacks the layout and formatting options of other presentation apps. For informal presentations, this tradeoff is worth it because it frees you up to focus on the writing instead of the visuals. This is great news when you need to work quickly üòÖ or when you simply don‚Äôt want to sink effort into type, colors, and spacing.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Use Paper when‚Ä¶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;The talk is fairly informal&lt;/li&gt;
&lt;li&gt;You‚Äôre on a &lt;em&gt;super&lt;/em&gt; tight deadline&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 tabIndex=0&gt;Avoid Paper when..&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You need a distinctive visual style&lt;/li&gt;
&lt;li&gt;You need speaker notes&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='section-title' id=google-slides&gt;&lt;a href='#google-slides' class='section-inner'&gt;Google Slides&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The collaborative one.&lt;/strong&gt; Google Slides is my most-used presentation app, and the absolute winner for group work. You can grant different permissions levels; for example, allow anyone at your company to comment but restrict editing to specific individuals. Slides gives you robust drawing and layout features, but is lighter and easier to learn than Keynote.&lt;/p&gt;

&lt;p&gt;Although Slides is web-based, it has an offline mode which is great for conference settings with unreliable internet. The caveat here is that offline presentations don‚Äôt play videos; the first frame shows as a poster image instead. In all situations, the Slides embedded video player feels unpolished as compared with Keynote.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Use Slides when‚Ä¶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You‚Äôre working in a group&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 tabIndex=0&gt;Avoid Slides when‚Ä¶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You want attractive video embedding&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='section-title' id=keynote&gt;&lt;a href='#keynote' class='section-inner'&gt;Keynote&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;The classy one.&lt;/strong&gt; Keynote is for making an ultra-polished presentation with no compromises. Out of all these tools, Keynote gives you the most control over all aspects of your deck, and you get luxe features such as magic transitions ü§© and beautiful video embedding. Keynote also includes helpful presenter tools, such as a Rehearsal Mode and a robust Presenter Display during the talk itself.&lt;/p&gt;

&lt;p&gt;All of this comes with a couple of tradeoffs. Firstly, the learning curve for Keynote is steeper than that of Slides, and even if you‚Äôre good with Slides, Keynote won‚Äôt necessarily feel familiar. Additionally, group work in Keynote is challenging as compared to Slides.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Use Keynote when‚Ä¶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You want the most beautiful deck possible&lt;/li&gt;
&lt;li&gt;You want great video embedding&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 tabIndex=0&gt;Avoid Keynote when‚Ä¶&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Working in a group&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 class='section-title' id=in-conclusion&gt;&lt;a href='#in-conclusion' class='section-inner'&gt;In Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Every presentation is different, and I haven‚Äôt found the One True Deck-Builder that I will use for every deck for the rest of my career. In the meantime, I rotate between Dropbox Paper, Google Slides, and Keynote depending on how quickly vs. collaboratively vs. polished I want to work.&lt;/p&gt;

&lt;p&gt;I hope this comparison has been helpful. Sending you good presentation vibes!&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;PS - Thank you to Ginger for asking me the original question about presentation tools üôÇ&lt;/p&gt;

&lt;p&gt;PPS - I haven‚Äôt used it professionally, so I can‚Äôt speak to it here, but I &lt;em&gt;love&lt;/em&gt; Prezi. Maybe deserves an Honorable Mention?&lt;/p&gt;

&lt;p&gt;PPPS - That&amp;#39;s right, I got a February 29th publish date in there! Goooo leap years ü•≥&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Using CSS Grid the right way</title>
    <link rel="alternate" href="https://vgpena.github.io/using-css-grid-the-right-way/"/>
    <id>https://vgpena.github.io/using-css-grid-the-right-way/</id>
    <published>2019-02-17T13:58:00-08:00</published>
    <updated>2019-02-17T14:45:29-08:00</updated>
    <author>
      <name>Violet Pe√±a</name>
    </author>
    <summary type="html">CSS Grid is fun to use but hard to learn. Here are three tips to help you understand and leverage the Grid spec.</summary>
    <content type="html">&lt;p&gt;CSS Grid is robust, flexible, and a refreshing paradigm shift from other CSS layout systems. While these are selling points for Grid, they also make it hard to learn.&lt;/p&gt;

&lt;p&gt;‚ÄúLearning‚Äù CSS Grid requires developing working knowledge of many new properties that don‚Äôt just describe &lt;em&gt;one&lt;/em&gt; aspect of appearance or behavior, but feed into a completely new layout system. This system includes &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;around 18&lt;/a&gt; properties which use paradigms and syntax rarely (or never) seen anywhere else in the CSS spec.&lt;/p&gt;

&lt;p&gt;This means that CSS Grid has a pretty high &lt;a href="https://us.battle.net/forums/en/overwatch/topic/20759355930#post-2"&gt;skill floor&lt;/a&gt; ‚Äî a developer needs to learn and internalize lots of new information in order to be effective with it. Once you‚Äôre above that skill floor, Grid is an amazing ally in layout creation. Below that skill floor, Grid is an encumbrance. You wonder why you‚Äôre bothering to use it at all, since it seems to require lots of additional work for little reward.&lt;/p&gt;

&lt;p&gt;In this post, I want to help you overcome that skill floor by showing you the most effective ways to leverage the Grid spec. While I‚Äôm not covering the spec in its entirety ‚Äî for something like that, see &lt;a href="https://css-tricks.com/snippets/css/complete-guide-grid/"&gt;this CSS Tricks post&lt;/a&gt; ‚Äî but what I cover here are, for me, the helpful aspects of this layout system.&lt;/p&gt;
&lt;h2 class='section-title' id=use-names-not-numbers&gt;&lt;a href='#use-names-not-numbers' class='section-inner'&gt;Use names, not numbers&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Grid columns and rows, at their most basic, are referred to by number. For example, this CSS sets up a grid with two columns and puts the page‚Äôs main content into the second column:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works, but it misses an amazing feature of Grid: you can give your rows and columns specific names. You should take advantage of this whenever possible.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the same CSS, adjusted to use names:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even in lightweight cases like this, it&amp;#39;s to your advantage to name grid areas.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Benefits&lt;/h3&gt;
&lt;p&gt;Adding names to your grid brings a couple of major benefits.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readability &amp;mdash;&lt;/strong&gt; Right off the bat, your code is easier to understand. Line 3 now &lt;em&gt;describes&lt;/em&gt; everything going on inside of the Grid container. You‚Äôre not just listing out columns; you‚Äôre outlining the &lt;em&gt;intent&lt;/em&gt; of each column.&lt;/p&gt;

&lt;p&gt;Line 7 has also become more descriptive. Previously, we only knew that &lt;code&gt;.content&lt;/code&gt; lived in the second column, which doesn‚Äôt mean much without more context ‚Äî column 2 out of 3? 2 of 200? Assigning a column name, however, signals that this element has specifically been accounted for within the larger system. Naming also makes it easier to find the original column declaration, should we need to.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Future-proofing &amp;mdash;&lt;/strong&gt; Adding names makes your CSS more flexible. Specifically, you can iterate on &lt;code&gt;.container&lt;/code&gt; without having to edit &lt;code&gt;.content&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Want to swap the visual order of the content and the sidebar? Easy.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Want to add another column? No prob.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;related-posts&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Without using named columns, you would have to update the column number in line 7 to reflect the changes made in line 3. Named columns give &lt;code&gt;.content&lt;/code&gt; consistent behavior that‚Äôs independent of the column count or order.&lt;/p&gt;
&lt;h2 class='section-title' id=use-codefrcode-as-your-flexible-unit&gt;&lt;a href='#use-codefrcode-as-your-flexible-unit' class='section-inner'&gt;Use &lt;code&gt;fr&lt;/code&gt; as your flexible unit&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;CSS Grid introduces the &lt;code&gt;fr&lt;/code&gt; unit, which tells an area to occupy some fraction of the total available space. While &lt;code&gt;fr&lt;/code&gt; might seem like a sidenote within the Grid spec, it&amp;#39;s actually indispensible.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;fr&lt;/code&gt; unit is different from &lt;code&gt;%&lt;/code&gt; or &lt;code&gt;vw&lt;/code&gt; because while the latter units describe portions of a 100-unit whole, &lt;code&gt;fr&lt;/code&gt;s are defined by the space not already used by something else. &lt;code&gt;fr&lt;/code&gt;s split up this space relative to each other.&lt;/p&gt;

&lt;p&gt;Here, the &lt;code&gt;content&lt;/code&gt; column is twice as wide as the &lt;code&gt;sidebar&lt;/code&gt; column.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since there are no non-&lt;code&gt;fr&lt;/code&gt; units and three &lt;code&gt;fr&lt;/code&gt;s in total, 1fr = ~33% of the width of the grid.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Benefits&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;fr&lt;/code&gt; unit offers a couple of things that other flexible units lack.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Readability and clearer intent &amp;mdash;&lt;/strong&gt; Using &lt;code&gt;fr&lt;/code&gt;s, unlike using percents, lets us stick with whole numbers that are sized relative to each other, not relative to a whole. This keeps the intended behavior clear. For example, line 3 is straightforward to translate into English: ‚ÄúThe content is twice as wide as the sidebar‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fr&lt;/code&gt;s also let you divvy up space in ways that would be hard to calculate (and read) using percentages.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.container&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;Less math &amp;mdash;&lt;/strong&gt; The biggest benefit of the &lt;code&gt;fr&lt;/code&gt; is that it takes the responsibility for doing exact arithmetic away from the developer and hands it off to the browser‚Äôs layout engine. For example, &lt;a href="https://codepen.io/vvviolet/pen/VgVExq"&gt;here‚Äôs a CodePen&lt;/a&gt; showing two ways to make the same layout using CSS Grid.&lt;/p&gt;

&lt;p&gt;These lines are the crux of the demo:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.percents&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nc"&gt;.frs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;20px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.percents&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="m"&gt;100%&lt;/span&gt; &lt;span class="n"&gt;-&lt;/span&gt; &lt;span class="m"&gt;40px&lt;/span&gt;&lt;span class="p"&gt;)/&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.frs&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The code on line 7 is hard to write, hard to read, and brittle. Any change to &lt;code&gt;grid-column-gap&lt;/code&gt; or to our column count will break the layout, unless we manually update the column width to match.&lt;/p&gt;

&lt;p&gt;Line 11 can ignore the gap size and won‚Äôt require new math if we update the column count. It‚Äôs easy to read and future-proof.&lt;/p&gt;
&lt;h2 class='section-title' id=dont-use-a-grid-system&gt;&lt;a href='#dont-use-a-grid-system' class='section-inner'&gt;Don‚Äôt use a grid system&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This contradictory-sounding recommendation extends beyond the CSS Grid spec and bleeds into how web design works and how developers interface with designers and their work.&lt;/p&gt;

&lt;p&gt;Layouts are often understood as elements aligned along a grid system.&lt;/p&gt;

&lt;p&gt;&lt;div class=" image-primary"&gt;
    &lt;img src="/images/grid-1.png" alt="" title="A 14-column grid system." width="2147px" height="1249px" /&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Typically, development strives for exact parity with design. If designs are based on a 14-column grid, development will set up some kind of 14-column grid in code and write helper classes to make items span 1, 2, 3, 6, etc. columns. Most frontend frameworks, like &lt;a href="https://getbootstrap.com/docs/4.3/layout/grid/"&gt;Bootstrap&lt;/a&gt;, work this way.&lt;/p&gt;

&lt;p&gt;In the above example, we have a 14-column grid, with these elements to place and size:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The header, which starts at column 2 and spans 12 columns&lt;/li&gt;
&lt;li&gt;The sidebar, which starts at column 2 and spans 4 columns&lt;/li&gt;
&lt;li&gt;The main content, which starts at column 6 and spans 8 columns&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In CSS Grid, it‚Äôs easy to set up a system that mimics the design:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="m"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.sidebar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But is this actually a good plan? Our attempt at 1:1 reproduction has two drawbacks.&lt;/p&gt;

&lt;p&gt;First, it foils our plan to name columns. Additionally, out of our 14 columns, we are only ‚Äúusing‚Äù columns 2, 5, 6, and 13. This &lt;em&gt;technically&lt;/em&gt; works, but it suggests a bad signal-to-noise ratio.&lt;/p&gt;

&lt;p&gt;Both of these problems are solved if we can take a couple of steps away from the original design:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-row-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;1rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-rows&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;100px&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="nb"&gt;auto&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.header&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;header&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sidebar&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;right-gutter&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.sidebar&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now instead of having fourteen columns, we only have four, but they still divide up the lateral space into fourteen parts. We have the exact same visual effect as in the first iteration, but our code is less noisy and directly reflects how it‚Äôs used.&lt;/p&gt;

&lt;p&gt;We can continue this paradigm throughout the layout. Say that within the &lt;code&gt;.content&lt;/code&gt; element, we have a need for auxiliary information (an author bio, a blurb, etc.) next to the main article.&lt;/p&gt;

&lt;p&gt;&lt;div class=" image-primary"&gt;
    &lt;img src="/images/grid-2.png" alt="" title="A 14-column grid system with additional nested elements." width="2132x" height="1248px" /&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;If we have adhered tightly to the 14-column grid, it appears that we need something like this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;6&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.info&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="p"&gt;/&lt;/span&gt; &lt;span class="n"&gt;span&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Which will be tricky, since CSS Grid has no concept of inheritance. &lt;code&gt;.info&lt;/code&gt; doesn‚Äôt know anything about the grid set up on &lt;code&gt;.main&lt;/code&gt;, its grandparent element.&lt;/p&gt;

&lt;p&gt;If we have let go of the literal 14-column grid, however, we may notice that &lt;code&gt;.article&lt;/code&gt; and &lt;code&gt;.info&lt;/code&gt; don‚Äôt &lt;em&gt;need&lt;/em&gt; to know anything about the top-level grid ‚Äî they‚Äôre part of a new grid inside of &lt;code&gt;.content&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.content&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-row&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-column-gap&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="m"&gt;2rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.article&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.info&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Using this setup, &lt;code&gt;.content&lt;/code&gt; is simple and internally consistent, but also aligns perfectly with our outer columns set up on &lt;code&gt;.main&lt;/code&gt;.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Benefits&lt;/h3&gt;
&lt;p&gt;In addition to what I‚Äôve already outlined, looser adherence to the original design system sets us up as developers to leverage our expertise and our tools ‚Äî the browser ‚Äî more effectively. Pixels and columns are less salient than relationships and proportional space.&lt;/p&gt;

&lt;p&gt;It‚Äôs not significant that &lt;code&gt;.article&lt;/code&gt; starts at column 7 and &lt;code&gt;.info&lt;/code&gt; at column 11. It &lt;em&gt;is&lt;/em&gt; significant that &lt;code&gt;.article&lt;/code&gt; is twice as wide as &lt;code&gt;.info&lt;/code&gt;. Thinking about elements proportionally and questioning how they interact with each other helps us treat layouts as dynamic systems.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Sidenote: Nesting Markup&lt;/h3&gt;
&lt;p&gt;One thing you may have noticed about the code samples in this section is the usage of &lt;code&gt;left-gutter&lt;/code&gt; and &lt;code&gt;right-gutter&lt;/code&gt; columns. This CSS assumes the most flat HTML possible.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;8&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we are willing to put a wrapper div into the markup, we can write more direct CSS with fewer columns per element.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code html"&gt;&lt;code&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"main"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"wrapper"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"header"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"sidebar"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"content"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre class="code css"&gt;&lt;code&gt;&lt;span class="nc"&gt;.main&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;12&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;right-gutter&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nc"&gt;.wrapper&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;grid-column&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;wrapper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nl"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;grid&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="py"&gt;grid-template-columns&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;sidebar&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="n"&gt;fr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The second approach feels inherently better because the math is simpler ‚Äî you get to stop worrying as soon as possible about numbers that add to 14 and just think about a 1:2 ratio. This feels true to the spirit of CSS Grid.&lt;/p&gt;

&lt;p&gt;What doesn‚Äôt feel true to CSS Grid, though, is adding the &lt;code&gt;.wrapper&lt;/code&gt; div. Grid works hard to help us separate presentation from content ‚Äî i.e., we don‚Äôt need to add extra elements to make the styling work or ‚Äúbehave nicely‚Äù. So, at least for today, I encourage you &lt;em&gt;not&lt;/em&gt; to add or change markup for the sole purpose of cleaner CSS Grid styling.&lt;/p&gt;
&lt;h2 class='section-title' id=coda&gt;&lt;a href='#coda' class='section-inner'&gt;Coda&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for coming on this CSS Grid journey with me! I‚Äôve been using and loving it over the past couple of months, and I hope this helps you understand and use it on your end üíê&lt;/p&gt;

&lt;p&gt;To reiterate my points from the intro, CSS Grid is easy to use but difficult to learn. It‚Äôs a more intuitive paradigm than any other CSS layout technique, but it‚Äôs completely different from its predecessors.&lt;/p&gt;

&lt;p&gt;All this to say: take Grid as slowly as you need to. Don‚Äôt try to understand it all just from reading the spec. Set up simple examples, pop open that web inspector (especially in Firefox!), and be kind to yourself.&lt;/p&gt;

&lt;p&gt;It‚Äôll be worth it.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Private vs. Restricted Node Packages: What's the Diff?</title>
    <link rel="alternate" href="https://vgpena.github.io/private-vs-restricted-node-packages-what-s-the-diff/"/>
    <id>https://vgpena.github.io/private-vs-restricted-node-packages-what-s-the-diff/</id>
    <published>2018-12-28T15:05:00-08:00</published>
    <updated>2018-12-28T15:52:19-08:00</updated>
    <author>
      <name>Violet Pe√±a</name>
    </author>
    <summary type="html">'Private' and 'Restricted' may sound similar, but they're completely different when it comes to Node packages. Here's what they mean and how to use them.</summary>
    <content type="html">&lt;p&gt;At &lt;a href="http://www.instrument.com/"&gt;work&lt;/a&gt;, my team is sharing React components with our client by packaging and publishing each component individually. Publishing Node packages is new territory for me, and the learning curve hasn‚Äôt always been gentle. I‚Äôll take some time now to clarify a paradigm I initially found confusing: what‚Äôs the difference between making a Node package &lt;em&gt;private&lt;/em&gt; and &lt;em&gt;restricting access&lt;/em&gt; to it?&lt;/p&gt;
&lt;h2 class='section-title' id=private-node-packages&gt;&lt;a href='#private-node-packages' class='section-inner'&gt;Private Node packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A private package is not shared or distributed on its own, and cannot be published to a registry (such as &lt;a href="https://www.npmjs.com/"&gt;npmjs.com&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;div class=" image-secondary"&gt;
    &lt;img src="/images/harriet.gif" alt="" title="Harriet the Spy shows us the cover of her journal, which reads PRIVATE." width="400px" height="232px" /&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Marking a package as private ensures that its code will not be published, even accidentally. For instance, a one-off marketing site using React will contain a &lt;code&gt;package.json&lt;/code&gt; file. Unless this file specifies that the project is private, an errant contributor could publish the project code to a package registry, even if the code were proprietary or simply wouldn‚Äôt make sense to distribute on its own.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a sample &lt;code&gt;package.json&lt;/code&gt; for a non-distributable project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"specific-website"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A bespoke website for &amp;lt;Client&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"private"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"scripts"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Privacy only affects the ability to publish to a package registry ‚Äî it won‚Äôt affect other ways of sharing code, such as pushing to a Github repo.&lt;/p&gt;

&lt;p&gt;As a sidenote, private packages are generally ignored by packaging utilities. For example, &lt;a href="https://github.com/lerna/lerna"&gt;Lerna&lt;/a&gt; won‚Äôt include private packages in its &lt;code&gt;lerna list&lt;/code&gt; output unless you pass in the &lt;code&gt;--all&lt;/code&gt; flag.&lt;/p&gt;
&lt;h2 class='section-title' id=restricted-node-packages&gt;&lt;a href='#restricted-node-packages' class='section-inner'&gt;Restricted Node packages&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In contrast to private packages, restricted packages &lt;em&gt;can&lt;/em&gt; be distributed via a package registry, but only to whitelisted individuals. To use a restricted package, you need an account with the specific registry to which it was published, and you must belong to the organization or team that has access to that package. Otherwise, the package‚Äôs URL will 404.&lt;/p&gt;

&lt;p&gt;One use for restricted packages is for sharing proprietary code within a company. For example, a custom lazyloader that conforms to studio standards can be used on multiple projects either through copy-pasting the original code over and over (boo), or through publishing the code once to npmjs.com and including it as a dependency on subsequent projects (yay!).&lt;/p&gt;

&lt;p&gt;Here‚Äôs a sample &lt;code&gt;package.json&lt;/code&gt; for a project with locked-down distribution permissions:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre class="code json"&gt;&lt;code&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"name"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"@company/awesome-lazyloader"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"version"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"0.0.1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"description"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"A reusable lazyloader for use at &amp;lt;Company&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"main"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"index.js"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"license"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"UNLICENSED"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"publishConfig"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="s2"&gt;"access"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;"restricted"&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="s2"&gt;"dependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;&lt;span class="w"&gt;  
      &lt;/span&gt;&lt;span class="s2"&gt;"devDependencies"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you publish to npmjs.com, take note that the site UI diverges from actual Node packaging terminology: a restricted package‚Äôs UI will have a ‚ÄúPrivate‚Äù badge even though the package &lt;em&gt;isn‚Äôt&lt;/em&gt; private. (I can‚Äôt explain this; it‚Äôs just bad UX.)&lt;/p&gt;

&lt;p&gt;&lt;div class=" image-primary"&gt;
    &lt;img src="/images/npmjs-com-private.png" alt="" title="A screengrab of a restricted package on npmjs.com; the site UI includes a &amp;quot;Private&amp;quot; badge under the package name." width="2470px" height="966px" /&gt;
  &lt;/div&gt;&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Licensing&lt;/h3&gt;
&lt;p&gt;If you are publishing a restricted package, you probably want it to be unlicensed, which means that no one is inherently authorized to modify or redistribute it. You can set this either by removing the &lt;code&gt;license&lt;/code&gt; field from the project‚Äôs &lt;code&gt;package.json&lt;/code&gt; or by setting it to &lt;code&gt;license: &amp;quot;UNLICENSED&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;h2 class='section-title' id=&gt;&lt;a href='#' class='section-inner'&gt;üëãüèª&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Thanks for reading! I hope this saved you some time. May 2019 be full of writing and sharing great JavaScript. ü•Çü•Ç&lt;/p&gt;

&lt;p&gt;Many thanks to Daniel, Ginger, and Thomas for your time, energy, and expertise.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title/>
    <link rel="alternate" href="https://vgpena.github.io/github-templates/"/>
    <id>https://vgpena.github.io/github-templates/</id>
    <published>2018-08-27T00:00:00-07:00</published>
    <updated>2018-12-28T15:54:36-08:00</updated>
    <author>
      <name>Violet Pe√±a</name>
    </author>
    <summary type="html"/>
    <content type="html">&lt;p&gt;The better your team communicates, the more time you can spend on the fun stuff -- building interesting things and solving hard problems. When you&amp;#39;re looking for ways to improve communication, take a look at Github. They‚Äôve rolled out two features that should be incorporated into any project: Pull Request templates and Issue templates. In this post, I‚Äôll walk through these tools and how to leverage them on your next (or current) project.&lt;/p&gt;

&lt;p&gt;For sample code, and a cloneable project template (hint hint), see my &lt;a href="https://github.com/vgpena/gh-docs-boilerplate"&gt;gh-docs-boilerplate repo&lt;/a&gt;. üíÖüèª&lt;/p&gt;
&lt;h2 class='section-title' id=pull-request-templates&gt;&lt;a href='#pull-request-templates' class='section-inner'&gt;Pull Request Templates&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We‚Äôve all been there: a pull request rolls in, titled ‚ÄúUpdates‚Äù, with no description and 22 files changed.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class=" image-primary"&gt;
    &lt;img src="/images/github-templates/bad-pr.png" alt="" title="A PR with very little information or context." width="1592px" height="468px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;üëçüèª LGTM&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôre not sure what it does, which tickets it closes, or how to test it. Until the person who opened the PR is given a chance to explain themself, project managers and fellow engineers can‚Äôt track on what work has been done. Over time, this lack of context and consistency slows work down and leads to misunderstandings.&lt;/p&gt;

&lt;p&gt;Enter Pull Request templates. These are simple Markdown files that prepopulate pull request description fields. You can put this template in your repository root, a &lt;code&gt;/docs&lt;/code&gt; folded, or a &lt;code&gt;/.github&lt;/code&gt; folder. Once it exists on your default branch (usually &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;dev&lt;/code&gt;), its content will flow into all newly opened PRs.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class=" image-primary"&gt;
    &lt;img src="/images/github-templates/good-pr.png" alt="" title="When you create a PR template, its contents populate new PRs." width="1578px" height="1410px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;One click and you&amp;#39;re halfway there.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="https://github.com/vgpena/gh-docs-boilerplate/blob/master/.github/pull_request_template.md"&gt;Here‚Äôs my starter template&lt;/a&gt;; I like to list out headings for any information I want from a contributor. You almost certainly want these questions answered:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What changes does this branch contain?&lt;/li&gt;
&lt;li&gt;What issues/tickets does this branch close?&lt;/li&gt;
&lt;li&gt;How can I test this code?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Depending on your project and workflow, you may want to include places for contributors to upload screenshots, link to prototypes, or (my favorite) embed GIFs that reflect their feelings towards that PR.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class=" image-primary"&gt;
    &lt;img src="/images/github-templates/mainframe.gif" alt="" title="A glitch art + muppets GIF." width="400px" height="225px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;Sample GIF included for your inspiration.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 class='section-title' id=issue-templates&gt;&lt;a href='#issue-templates' class='section-inner'&gt;Issue Templates&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Communication and documentation can also be skimped on when opening issues. We‚Äôve all been guilty of creating issues with vague titles and no context.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class=" image-primary"&gt;
    &lt;img src="/images/github-templates/bad-issue.png" alt="" title="" width="1592px" height="468px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;Time for some detective work!&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;If I didn‚Äôt personally open this ticket, I don‚Äôt know what needs to be done or what success looks like. I can‚Äôt prioritize it or estimate its complexity.&lt;/p&gt;

&lt;p&gt;Issue templates, like PR templates, are Markdown files that provide default content for Issues opened via Github. They go in the &lt;code&gt;/.github/ISSUE_TEMPLATE&lt;/code&gt; folder. Like PR templates, they only kick in when on your default branch.&lt;/p&gt;

&lt;p&gt;Issue templates go one step farther than PR templates by letting you create multiple issue types, which are all available in a choose-your-own-adventure issue picker.&lt;/p&gt;

&lt;p&gt;&lt;div class=" image-primary"&gt;
    &lt;img src="/images/github-templates/issue-picker.png" alt="" title="Define multiple Issue templates, and you get a cool Issue picker on Github." width="1586px" height="580px" /&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;Selecting an issue type will flow that specific template into your new issue.&lt;/p&gt;

&lt;p&gt;&lt;div class=" image-primary"&gt;
    &lt;img src="/images/github-templates/good-issue.png" alt="" title="Once you pick an issue template, its text prepopulates a new issue." width="1558px" height="1152px" /&gt;
  &lt;/div&gt;&lt;/p&gt;

&lt;p&gt;You can define as many issue formats as you want and tailor them to your project. For example, a recent project of mine had five total template types. The Backend template had a prompt to list out any tests that should be written; the Frontend template asked for embedded design comps.&lt;/p&gt;

&lt;p&gt;I recommend having at least three issue templates:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;New Feature&lt;/li&gt;
&lt;li&gt;Change Request&lt;/li&gt;
&lt;li&gt;Bug Report&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;These buckets encompass almost all changes made to a project. They help team members include the right information (no more bug reports without browser/OS), and they also help define the task in the first place. Knowing, and making explicit, whether something is a bugfix or an update, a change or a new feature, helps clarify its implications and priority.&lt;/p&gt;

&lt;p&gt;I have three issue templates set up &lt;a href="https://github.com/vgpena/gh-docs-boilerplate/tree/master/.github/ISSUE_TEMPLATE"&gt;here&lt;/a&gt;. I recommend writing your own set of templates to reflect your ticketing flow and project needs.&lt;/p&gt;
&lt;h2 class='section-title' id=in-the-wild&gt;&lt;a href='#in-the-wild' class='section-inner'&gt;In the Wild&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Congrats, you added PR and Issue templates to your project! üéâ As your project evolves, revisit them every so often to make sure they still meet your needs. It only takes a few minutes to add and remove fields, swap out or edit templates. Give any changes about a week to sink in; if they still don‚Äôt feel right, group up with your team and figure out something better. It‚Äôll be a quick meeting, and you‚Äôll get to learn about what each other do and need.&lt;/p&gt;
&lt;h2 class='section-title' id=but-wait-theres-more&gt;&lt;a href='#but-wait-theres-more' class='section-inner'&gt;But Wait, There‚Äôs More!&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Github offers other low-effort ways to improve communication:&lt;/p&gt;
&lt;h3 tabIndex=0&gt;The Readme&lt;/h3&gt;
&lt;p&gt;This is a low bar to clear, but I‚Äôm regularly shocked by how many projects don‚Äôt have a proper Readme. A brief write-up on what the project does and how to install it is invaluable. Even if your project is a fork or clone of &lt;em&gt;another&lt;/em&gt; project, update your Readme ‚Äî surely something about &lt;em&gt;your&lt;/em&gt; project is different from the source material.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Code of Conduct&lt;/h3&gt;
&lt;p&gt;Adding a &lt;a href="https://help.github.com/articles/adding-a-code-of-conduct-to-your-project/"&gt;Code of Conduct&lt;/a&gt; to your project is easy, and it‚Äôs a powerful way to manage community on open-source projects. If you add one to your repo, it will be linked to in the issue creation flow.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Contribution Guidelines&lt;/h3&gt;
&lt;p&gt;Like a CoC, &lt;a href="https://help.github.com/articles/setting-guidelines-for-repository-contributors/"&gt;Contribution Guidelines&lt;/a&gt; clarify community standards and keep discussion productive. This will also be linked to when issues are opened. Contribution guidelines and CoCs are most applicable to open-source software, but it‚Äôs never &lt;em&gt;bad&lt;/em&gt; to codify expectations, even within a closed team.&lt;/p&gt;
&lt;h2 class='section-title' id=tldr&gt;&lt;a href='#tldr' class='section-inner'&gt;TL;DR&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Better communication = more time building fun things. Github can help you. Use &lt;a href="https://github.com/vgpena/gh-docs-boilerplate"&gt;my boilerplate&lt;/a&gt; to make Pull Request and Issue templates, sit back, and enjoy the clarity üòé&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Hard Reset</title>
    <link rel="alternate" href="https://vgpena.github.io/hard-reset/"/>
    <id>https://vgpena.github.io/hard-reset/</id>
    <published>2018-07-04T14:10:00-07:00</published>
    <updated>2018-07-04T14:32:33-07:00</updated>
    <author>
      <name>Violet Pe√±a</name>
    </author>
    <summary type="html">Getting away, physically and mentally, is something that I need in order to stay healthy. Of course I only realize this when it's too late. Here's an ode to nature, thoughts on burnout, and a plan to stay happy.</summary>
    <content type="html">&lt;p&gt;Two nights ago, I slept in my own bed for the first time in almost three weeks.&lt;/p&gt;

&lt;p&gt;My boyfriend and I had just returned from a two-and-a-half-week-long voyage through Amsterdam, Dubrovnik, and London. We‚Äôd seen &lt;em&gt;Sunflowers&lt;/em&gt; and the Rosetta Stone; we‚Äôd kayaked and jetskied; we‚Äôd eaten slabs of tongue-burning cheese pastry and spooky but delectable foamed asparagus.&lt;/p&gt;

&lt;p&gt;But more valuable than these experiences, than fun, than knowledge, is simply having my head screwed on straight again.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I moved to Portland in the fall of 2014 after finding that, as much as I wished otherwise, I was fundamentally incompatible with New York City. When people (usually my Detroit-based relatives; usually at Passover) ask me what I like about living here, I find myself invoking the usual Portland clich√©s: it‚Äôs highly bikeable; the food is top-notch; it‚Äôs close to nature.&lt;/p&gt;

&lt;p&gt;This last point has done me incalculable good over the three and a half years that I‚Äôve dwelled here. Too much good to dissect quickly with family over a noisy dinner; too much for even me to understand without careful consideration.&lt;/p&gt;

&lt;p&gt;So here we go.&lt;/p&gt;

&lt;p&gt;I‚Äôd basically never hiked before moving out here. Growing up in Buffalo, NY, I‚Äôd been on a handful of creek walks; I knew how to canoe, start a fire, identify nascent hypothermia. But not seeing another person for hours, for a day; anticipating and responding to hunger, thirst, cold, tiredness; drawing together two points on a map using only my own body, using my tiny self to carve new spaces out of the soil, out of air? Not a chance. The monotony, wonder, calculus, poetics of hiking were new to me, alien experiences adjacent to my everyday life. Stone, trees, mulch are there even now, separated by a spun-sugar membrane from my home and bed where I write this.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;&lt;figure role="img" class=" image-primary"&gt;
    &lt;img src="/images/cascades.JPG" alt="A photo of a lake in a valley ringed by snowy mountains." title="The view from a snowy ridge in the North Cascades." width="1360px" height="1020px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;North Cascades, Washington State, Fall 2017. I camped by this lake.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;When you are hiking, you are thinking about nothing else. Even if you‚Äôre talking about work, about friends, about books with your hiking companions, there is always part of your mind that‚Äôs focused not on that conversation but on sensation, on your surroundings. Part of you is aware only of smells, of temperature, of your own breathing. And when silence falls, when the conversation dies, that part of your mind expands to fit the space available.&lt;/p&gt;

&lt;p&gt;For infinite moments I have been a valley, been distance, granite, innumerable trees.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This time spent outside of myself is stranger, more elusive, than as to be easily described. I sleep well that night; I go to work the next week and spend a few minutes confused: what am I doing here; what was I working on on Friday?&lt;/p&gt;

&lt;p&gt;But once the confusion clears, I feel amazing. The top sheet of paper has been torn from a notepad, revealing a completely blank page underneath. I have never been tired; I have never been hurt. How do I feel this okay?&lt;/p&gt;

&lt;p&gt;As I realized that this was a pattern, a name presented itself: a hard reset.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;A hard reset is when you bypass normal, software-based ways of shutting down or restarting something, usually a computer. Instead of telling the machine to shut itself down via a dropdown option, waiting for programs to close, and telling it what to do with unsaved documents and so on, you simply hold down the Power button until the screen goes dark. When your computer boots up again it has little or no idea what it was just doing. It might have a recovery state saved that you could invoke to reopen some programs, but by and large the machine is in a fresh, &lt;em&gt;who am I and what year is it&lt;/em&gt; state.&lt;/p&gt;

&lt;p&gt;This is how I am the day or two after coming back from a long hike. Being forced to (or getting to) think about hiking and only hiking for an entire day shifts my mind into a different track. I slow down, or at least my thoughts cluster differently. I don‚Äôt, I can‚Äôt think about a meeting or an architecture decision, because I‚Äôm noticing how the ground feels, listening for the first whispers of thirst, noticing acutely and dimly the ferns that litter my path.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class=" image-secondary"&gt;
    &lt;img src="/images/mthood.jpg" alt="A close-in photo of a snow-covered mountain." title="Looking up to Mount Hood." width="1360px" height="1020px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;Mt. Hood from Cairn Basin, Summer 2016.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This hard reset has become supremely important for me; this is the first time I‚Äôve been able to identify that I need it &lt;em&gt;and&lt;/em&gt; been able to get it. For me, the cart came before the horse in that I got it and only later realized how okay it made me feel.&lt;/p&gt;

&lt;p&gt;(In my experience, hard resets make me feel wonderful, happy, good, etc. but above all &lt;em&gt;okay&lt;/em&gt; in the positive sense ‚Äî buoyant, stable, and whole. As I mention above: untired; unhurt.)&lt;/p&gt;

&lt;p&gt;When I lived in New York City, life maintained a death grip on me. No matter what I did, I was me doing nothing but living my life, my step-by-step life in a body in a place. And it added up.&lt;/p&gt;

&lt;p&gt;I didn‚Äôt move to Portland for the hard reset or for work-life balance. I didn‚Äôt know about hard resets, and balance is a nut I have yet to crack (but I‚Äôm trying). I moved here for a job, because I always move for jobs. I took the job that paid the most, the single job I applied for outside of the NYC area, the escape hatch I traced for myself out of what I slightly already understood was an untenable life.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This summer, I needed something deeper than a hard reset. I love work and I still love my job, but the downside of this is that it has a way of creeping into hours and cycles that I should be spending doing anything but working. I may not be in the office but as I play games, read, garden, some part of my brain is mulling over how to order upcoming features, onboard a new team member, handle a change to the stack.&lt;/p&gt;

&lt;p&gt;To be clear, I let this happen. Compartmentalization is a skill, one that I learned from my violin teacher. As he reworked my bow hold and gave me intervals to practice, he also helped train me to leave thoughts at the door, to make room for only what I needed in the moment.&lt;/p&gt;

&lt;p&gt;(He also noticed that, when playing, my breath sometimes became irregular: I was forgetting to breathe.)&lt;/p&gt;

&lt;p&gt;I let those skills slide, let my hard resets slide in the name of &lt;em&gt;career advancement&lt;/em&gt; and out of genuine pleasure at the challenges I had been handed. It was fun until it wasn‚Äôt. Until I was coming in on Mondays still-tired and still-hurt and trying everything to make it not show. I would come home late, ground down, unable to stop thinking about that day and about the one coming up.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;It wasn‚Äôt burnout, or maybe it was? Does it count as burnout if you never cry &lt;em&gt;at&lt;/em&gt; work? If you never yell at anyone, if you never look for another job?&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;I put an out-of-office responder on my email and could finally exhale. We were halfway through a Van Gough exhibit in Amsterdam. We paused between floors and I hit some buttons to give myself the space that an ocean hadn‚Äôt been able to supply.&lt;/p&gt;

&lt;p&gt;I thought I would be better by the time we got to Croatia. I had allocated a few days to feel tired, to feel okay-but-down in that way you need to allow yourself to feel sometimes, because that‚Äôs the only way to not make it worse.&lt;/p&gt;

&lt;p&gt;I was not better in Croatia. Thinking about work made my chest tighten. My boyfriend pecked merrily away at a side project; opening a text editor made me want to puke. I read a book, gazed at the sea, played games, was not myself for a bit. Some days I felt solidly better than before; one day I woke up and was sad from that moment until I went to sleep that night. I still don‚Äôt know why.&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class=" image-secondary"&gt;
    &lt;img src="/images/dubrovnik.jpg" alt="A photo of an old city with narrow streets and orange tiled roofs; the sea is visible beyond." title="The old section of Dubrovnik." width="1360px" height="1020px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;Dubrovnik from the old city wall, Summer 2018. Getting better.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;I was better on my third day in London. I woke up early and walked around alone. Dipped in and out of shops; felt the undulations of building patterns across streets, neighborhoods. Bought a pen and was happy. I felt autonomous; I felt myself wanting things.&lt;/p&gt;

&lt;p&gt;That afternoon, I wrote some code. Because I wanted to. I slept well.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;Here I am, home again, working on finding and maintaining this peace. What do I need to be happy? How do I stay buoyant?&lt;/p&gt;

&lt;p&gt;I thought I was low-maintenance but I guess not, or maybe this &lt;em&gt;is&lt;/em&gt; low-maintenance, or maybe the metric of ‚Äúwhat do you need to do in your free time to be happy at work‚Äù is backwards and inside-out. (Kidding; I &lt;em&gt;know&lt;/em&gt; it is.)&lt;/p&gt;

&lt;p&gt;This is my journey to consistent wellness; I assume it will take forever, but maybe it will get easier someday.&lt;/p&gt;

&lt;p&gt;In the meantime, here I will be, giving myself (making for myself) the space and the circumstances to be well.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title>Good is better than perfect</title>
    <link rel="alternate" href="https://vgpena.github.io/good-is-better-than-perfect/"/>
    <id>https://vgpena.github.io/good-is-better-than-perfect/</id>
    <published>2017-12-27T11:42:00-08:00</published>
    <updated>2018-07-03T11:21:36-07:00</updated>
    <author>
      <name>Violet Pe√±a</name>
    </author>
    <summary type="html">Creation can be really hard because of the standards we set for ourselves. Here's how I stop worrying about perfection so that I can actually get things done.</summary>
    <content type="html">&lt;p&gt;I don‚Äôt like my blog.&lt;/p&gt;

&lt;p&gt;To clarify: as of writing, I‚Äôm lukewarm on how article titles look. I don‚Äôt have per-post tags; I haven‚Äôt added pagination to the index. I could go on.&lt;/p&gt;

&lt;p&gt;When I launched, about ten months ago, my list of complaints was even longer. I didn‚Äôt love my body font; I &lt;em&gt;really&lt;/em&gt; didn‚Äôt love my &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;s. I hadn‚Äôt written styles for section headers, tables, or asides.&lt;/p&gt;

&lt;p&gt;But I had made something.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;This is actually the third iteration of my blog; the first two lived only on my local server, each &lt;code&gt;rm -r&lt;/code&gt;&amp;#39;d when I realized that something about them wasn‚Äôt, and could never be, perfect.&lt;/p&gt;

&lt;p&gt;As I laid the groundwork for my third version, I promised myself that &lt;em&gt;this&lt;/em&gt;, no matter what, would be what I launched. I was done spinning my wheels on mechanical problems; I needed to move past that and start actually writing.&lt;/p&gt;

&lt;p&gt;Because, naturally, my quest for perfection wasn‚Äôt just because I wanted to make a good-looking site. It was also a bid to avoid ever writing a single post. After all, if my site wasn&amp;#39;t done, how could I publish things on it?&lt;/p&gt;

&lt;p&gt;It‚Äôs so much easier to write CSS for myself than it is to write English for other people.&lt;/p&gt;

&lt;hr&gt;

&lt;p&gt;But here I am, ten months later, with a still-flawed &lt;em&gt;but productive&lt;/em&gt; site, a site which lets me express myself, spread knowledge, and hone my writing skills. It&amp;#39;s not perfect. But, perfections included, it&amp;#39;s exactly right for me.&lt;/p&gt;
&lt;h2 class='section-title' id=how-to-create-something-imperfect&gt;&lt;a href='#how-to-create-something-imperfect' class='section-inner'&gt;How to create something imperfect&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Most people I&amp;#39;ve talked to who self-host a blog get bogged down, as I did, in the creation step.&lt;/strong&gt; This is a reliable pattern because webdev is hard &lt;em&gt;and writing is even harder&lt;/em&gt;. This is fine. You&amp;#39;re fine. Make something good, make something that supports what you immediately need it to support, and get it out. the. door.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a few things that helped me:&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Create content, then develop to that spec&lt;/h3&gt;
&lt;p&gt;Since you can&amp;#39;t control another separate human&amp;#39;s actions, client work usually involves some kind of attempt &lt;a href="https://en.wikipedia.org/wiki/Three-body_problem"&gt;to anticipate every single possible thing they might want to do&lt;/a&gt;, which is a) super obnoxious and b) super fun.&lt;/p&gt;

&lt;p&gt;How should we crop and position images if the client tries to upload something 800px by 80px? How should we space out the title if they only make it one word long? What if they create an article and then leave the body completely blank? Et cetera.&lt;/p&gt;

&lt;p&gt;When you&amp;#39;re your own client, you don&amp;#39;t have to build what you don&amp;#39;t need.&lt;/p&gt;

&lt;p&gt;In my case, I drafted a couple of articles so that I wouldn&amp;#39;t deploy an empty blog (SO EMBARASSING RITE???). As soon as they were vaguely done, I switched over to use those, not Lorem Ipsum, as dummy content. I was able to build to my own exact needs, so I made a blog that worked perfectly &lt;em&gt;even though&lt;/em&gt; I hadn&amp;#39;t written styles for tables or even section headings.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m not advising to make bespoke one-offs, or to work without considering stability/extensibility. Make a system, but accept that that system won&amp;#39;t be all-encompassing. Make a system that you intend to improve. Make the system &lt;em&gt;that you need&lt;/em&gt;.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Remember that you don&amp;#39;t work in print&lt;/h3&gt;
&lt;p&gt;Logically, this isn&amp;#39;t difficult, but something about it is emotionally hard for me.&lt;/p&gt;

&lt;p&gt;If you think your site is ugly but you push ahead and publish a couple of posts, you can deploy better styles later and everything will now be pretty, &lt;em&gt;even the posts that were originally ugly&lt;/em&gt;. Hooray for the internet!&lt;/p&gt;

&lt;p&gt;&lt;figure role="img" class="image-wrap image-secondary"&gt;
    &lt;img src="/images/first-try.gif" alt="" title="Animation from The Lego Movie: Batman throws Batarangs at a button until he hits it." width="358px" height="231px" /&gt;
  &lt;figcaption&gt;
    &lt;p&gt;IT&amp;#39;LL BE FINE.&lt;/p&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Know that you&amp;#39;re not famous&lt;/h3&gt;
&lt;p&gt;(I assume.)&lt;/p&gt;

&lt;p&gt;Anyway, a lot is made of splashy launches and Sticking The Landing, but whoever your idol is &lt;em&gt;is definitely not reading your blog right now&lt;/em&gt;. You have plenty of time to find your voice, fix your wonky line-heights, etc. before it&amp;#39;s read by Oprah or Dan Abramov or whoever. This time is a rehearsal, and it&amp;#39;s valuable.&lt;/p&gt;
&lt;h3 tabIndex=0&gt;Don&amp;#39;t mistake labor for progress&lt;/h3&gt;
&lt;p&gt;Is your goal to make a good website, or is it to become a better writer?&lt;/p&gt;

&lt;p&gt;I don&amp;#39;t know how long it takes to get comfortable writing, to find your voice, to carve out a good schedule, to pick  topics that you reliably want to write about. But my blog has been live for ten months and I can tell you that I&amp;#39;m not there yet.&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s say that it takes two or three years of low-intensity blogging before you develop proficiency.&lt;/p&gt;

&lt;p&gt;That timer doesn&amp;#39;t start until you&amp;#39;re actually publishing posts. You can toil away for a year and a half on an amazing perfect üëåüèªüî•üíØ website; this will have zero effect on your writing prowess.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Make something that advances you towards your goal&lt;/strong&gt;, or at least be honest about what you&amp;#39;re working on and whether it&amp;#39;s part of that specific journey. I&amp;#39;ve taken detours and they&amp;#39;ve been helpful and lovely but I&amp;#39;m not going to pretend that revamping my font-loading made me a better writer.&lt;/p&gt;
&lt;h2 class='section-title' id=the-journey&gt;&lt;a href='#the-journey' class='section-inner'&gt;The journey&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Over the past ten months, I&amp;#39;ve held tight to these maxims -- they&amp;#39;ve been invaluable not only while creating the blog, but since then, as I continue to write and publish.&lt;/p&gt;

&lt;p&gt;If you&amp;#39;ve been looking for a sign to start a blog or launch a project, let this be it. You&amp;#39;ll love your imperfect, real creations a thousand times more than something flawless that&amp;#39;s never seen the light of day.&lt;/p&gt;

&lt;p&gt;Excited for what you make in 2018! üíÉüèª&lt;/p&gt;
</content>
  </entry>
</feed>
